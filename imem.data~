// 55:035 sisc processor project
// Jacob Dye & Matt Fina
//	instructions for part 3
//
00000000 //00: NOP!
88010001 //01: ADDI R1 <- R0 + (0x0000)0001 
80112001 //02: ADD  R2 <- R1 + R1    R2=2
80213002 //03:SUB R3 <- R2 -R1       R3=1
62000006 //04:branch if (greater or equal to zero) to instruction 6. should skip nop
00000000 //05: NOP!
88010004 //06: r1 <- r1 + 3 = 4
80215002 //07: r5 <- r2 - r1; should set negative bit in STAT reg R5 = -2
62000000 //08: branch if (greater or equal to zero) to halt at end. should NOT branch
80536001 //09: r6 <- r5+r3 = -1
53000001 //0A: branch if (less than or equal to zero) should skip nop
00000000 //0B: NOP!
80124002 //0C: r4 <- r1 - r2 = 2
52000001 //0D: branch if (less than zero) should NOT branch
00000000 //0E: NOP!
80237001 //0F: r7 <- r2 + r3 = 3
43000000 //10: branch if (less than or equal to zero) should NOT branch (branches to start)
80537001 //11: r7 <- r5 + r3 = -1
43000014 //12: branch if (less than or equal to zero) should branch to end
00000000 //13: NOP!
00000000 //14: NOP!
00000000 //15: NOP!
00000000 //16: NOP!
18010000 //17: load address 0 into r1  using imm; imm=0
00000000 //18: NOP!
10820001 //19: load address 0 into r2 using rs+imm; rs = r8 = 0; imm = 0
00000000 //20: NOP!
00000000
30121000 //21: SWAP r1, r2
00000000
20840005 //21: store into address (imm + rs) <- rt; imm = 5, rs = r8 = 0; rt = r4 = 2
00000000 //22: NOP!
28040006 //23: store into address(imm)<- rt; imm = 6; rt = r4 =2
00000000 //24: NOP!
18010005
00000000 //26: NOP!
18020006
00000000 //28: NOP!
F0000000 //20: HALT

//8022300B //03: SHFL R3 <- R2 << [R2]
//80124002 //04: SUB  R4 <- R1 - R2
//8043400A //05: SHFR R4 <- R4 >> [R3]
//80342007 //06: XOR  R2 <- R3 ^ R4
//80202004 //07: NOT  R2 <- ~R2
//80214009 //08: ROTL R4 <- R2 <.< [R1]
//80245005 //09: OR   R5 <- R2 | R4
//80243006 //0A: AND  R3 <- R2 & R4






